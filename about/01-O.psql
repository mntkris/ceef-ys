\set schema o
\ir 00-init.psql

\echo '\n===== ENUM TYPES ======\n'

CREATE TYPE WDayOfWeek AS ENUM('tue', 'thu');
\dT+ WDayOfWeek

ALTER TYPE WDayOfWeek ADD VALUE 'wed' AFTER 'tue';
\dT+ WDayOfWeek

ALTER TYPE WDayOfWeek ADD VALUE 'wed' BEFORE 'thu'; 
ALTER TYPE WDayOfWeek ADD VALUE IF NOT EXISTS 'wed' BEFORE 'thu'; 
\dT+ WDayOfWeek

ALTER TYPE WDayOfWeek ADD VALUE 'mon' BEFORE 'tue';
ALTER TYPE WDayOfWeek ADD VALUE 'fri' BEFORE 'thu';  --intentionally
\dT+ WDayOfWeek

\echo 'INFO: no DROP VALUE implemented for now\n'

CREATE TEMPORARY TABLE wdowtest(wdow WDayOfWeek, txtwdow TEXT);
INSERT INTO wdowtest(wdow, txtwdow) 
SELECT d, d::TEXT 
FROM unnest(ARRAY['fri', 'tue', 'thu', 'mon', 'wed']::WDayOfWeek[]) AS d;

\echo '\nNOTE: order according to position in enum definition\n'
SELECT * FROM wdowtest ORDER BY wdow DESC;
SELECT ARRAY_AGG(wdow ORDER BY wdow) wdays,
  enum_range(NULL:::schema.WDayOfWeek) enum_tange
FROM wdowtest;

\echo 'trying to swap thu and fri\n'

BEGIN;
ALTER TYPE WDayOfWeek RENAME VALUE 'fri' TO 'xfri';
ALTER TYPE WDayOfWeek RENAME VALUE 'thu' TO 'fri';
ALTER TYPE WDayOfWeek RENAME VALUE 'xfri' TO 'thu';
\dT+ WDayOfWeek

\echo '\nNOTE: RENAME VALUE changes only <label> not <position> obviously\n'

SELECT * FROM wdowtest ORDER BY wdow;
ROLLBACK;
\dT+ WDayOfWeek

\echo '\nalter column type must be used to <reposition> enum items\n'

ALTER TYPE WDayOfWeek RENAME TO XWDayOfWeekX;
\d wdowtest
CREATE TYPE WDayOfWeek AS ENUM ('mon', 'tue', 'wed', 'thu', 'fri');
ALTER TABLE wdowtest ALTER COLUMN wdow TYPE WDayOfWeek USING wdow::TEXT::WDayOfWeek;
DROP TYPE XWDayOfWeekX;
\d wdowtest
SELECT * FROM wdowtest ORDER BY wdow;

\echo '\nuse of idempotent meta.define_enum\n'

SELECT (meta.define_enum(:'schema', 'Digit', '->',     'X',        'Y',            '8'    )).ddl
\gexec
SELECT (meta.define_enum(:'schema', 'Digit', '->',     '1',        '4',            '8'    )).ddl
\gexec
SELECT (meta.define_enum(:'schema', 'Digit', '->',     '1','2',    '4',    '6',    '8'    )).ddl
\gexec
SELECT (meta.define_enum(:'schema', 'Digit', '->',     '2','1','3','4',    '6',    '8'    )).ddl --error
\gexec
SELECT (meta.define_enum(:'schema', 'Digit', '->',     '1','2','3','4',    '6',    '8'    )).ddl
\gexec
SELECT (meta.define_enum(:'schema', 'Digit', '->',     '1','2','3','4',    '6','7','8','9')).ddl
\gexec
SELECT (meta.define_enum(:'schema', 'Digit', '->', '0','1','2','3','4','5','6','7','8','9')).ddl
\gexec
SELECT (meta.define_enum(:'schema', 'Digit', '->', '0','1','2','3','4','5','6','7','8','9')).ddl
\gexec
\dT+ Digit


\echo '\n===== COMPOSITE TYPES ======\n'

SELECT meta.define_scalar('PersonFirstName', 'character varying(100)')
\gexec
SELECT meta.define_scalar('PersonLastName', 'character varying(100)')
\gexec
SELECT meta.define_scalar('PersonAge', 'int')
\gexec

CREATE TYPE Person AS (
  firstname PersonFirstName,
  lastname PersonLastName,
  abc TEXT
);
\dT Person
\d Person

-- add attribute
ALTER TYPE Person ADD ATTRIBUTE ge text;
\d Person

-- drop attribute
ALTER TYPE Person DROP ATTRIBUTE abc;
ALTER TYPE Person DROP ATTRIBUTE IF EXISTS abc;
\d Person

-- rename attribute
ALTER TYPE Person RENAME ATTRIBUTE ge TO age;

-- change attribute name
ALTER TYPE Person ALTER ATTRIBUTE age SET DATA TYPE PersonAge;
\d Person

--equality
SELECT (NULL, 'Smith', 20)::Person = (NULL, 'Smith', 20)::Person; --true
SELECT ('John', 'Smith', 20)::Person = (NULL, 'Smith', 20)::Person; --false
SELECT (NULL, NULL, NULL)::Person = (NULL, NULL, NULL)::Person; --true
SELECT (NULL, NULL, NULL)::Person != (NULL, NULL, NULL)::Person; --false

--nullability
SELECT (NULL, 'Smith', 20)::Person IS NULL;  --false (!!!)
SELECT (NULL, 'Smith', 20)::Person IS NOT NULL;  --false (!!!!)
SELECT (NULL, NULL, NULL)::Person IS NULL; --true
SELECT (NULL, NULL, NULL)::Person IS NOT NULL; --false

